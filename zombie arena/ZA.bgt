#include"includes/bullet.bgt"
#include"includes/const.bgt"
#include"includes/door.bgt"
#include"includes/fadepool.bgt"
#include"includes/hazard.bgt"
#include"includes/m_pro.bgt"
#include"includes/map.bgt"
#include"includes/menu.bgt"
#include"includes/zombie.bgt"
#include"sound_pool.bgt"
int arenatype;
int arenazombies;
int arenatime;
bool arena;
int weapon0damage=10;
int weapon0range=4;
int weapon0time=120;
int weapon0speed=30;
bool weapon0scatter=false;
int weapon1damage=18;
int weapon1range=12;
int weapon1time=90;
int weapon1speed=20;
bool weapon1scatter=false;
int weapon2damage=25;
int weapon2range=20;
int weapon2time=250;
int weapon2speed=50;
bool weapon2scatter=true;
int weapondamage;
int weaponrange;
int weapontime;
int weaponspeed;
int weapon=-1;
bool weaponscatter;
string levelname;
int maxx=100;
string version="0.32";
int health=100;
bool falling;
int fallspeed=120;
int deffallspeed=120;
int facing;
int airtime=40;
bool atapex;
int jumptime=70;
int apextime=60;
int jumptime2=90;
bool ascending;
int jumpheight=4;
int jumping;
int ty1, ty2;
int movetime;
int walktime=300;
int runtime=240;
vector camera, me;
sound_pool p;
timer arenatimer, falltimer, jumptimer, movetimer,weapontimer;
void main()
{
checkcard();
set_sound_storage("sounds.dat");
p.pan_step=2.5;
p.volume_step=2.5;
show_game_window("Zombie Arena V "+version);
if (screen_reader_is_running(1))
install_keyhook();
mainmenu();
}
void game()
{
while(true)
{
zloop();
bulletloop();
doorcheckloop();
hazardcheckloop();
p.update_listener_2d(me.x,me.y);
wait(5);
if (arena==true and arenatimer.elapsed>=arenatime)
{
arenatimer.restart();
for (uint i=1; i<=arenazombies; i++)
{
if (arenatype==0)
spawn_zombie(random(1,3),random(0,maxx),0);
else
spawn_zombie(arenatype,random(0,maxx),0);
}
}
if (key_pressed(KEY_H))
{
speak(health+" percent");
}
if (key_pressed(KEY_GRAVE))
{
speak("fists");
weapon=0;
p.play_stationary("weapon"+weapon+"draw.ogg",false);
weapondamage=weapon0damage;
weaponrange=weapon0range;
weapontime=weapon0time;
weaponspeed=weapon0speed;
weaponscatter=weapon0scatter;
}
if (key_pressed(KEY_1))
{
speak("laser");
weapon=1;
p.play_stationary("weapon"+weapon+"draw.ogg",false);
weapondamage=weapon1damage;
weaponrange=weapon1range;
weapontime=weapon1time;
weaponspeed=weapon1speed;
weaponscatter=weapon1scatter;
}
if (key_pressed(KEY_2))
{
speak("handgun");
weapon=2;
p.play_stationary("weapon"+weapon+"draw.ogg",false);
weapondamage=weapon2damage;
weaponrange=weapon2range;
weapontime=weapon2time;
weaponspeed=weapon2speed;
weaponscatter=weapon2scatter;
}
if (key_pressed(KEY_SPACE) and weapontimer.elapsed>=weapontime)
{
weapontimer.restart();
p.play_stationary("weapon"+weapon+".ogg",false);
spawn_bullet(weapondamage,weaponrange,me.x,me.y,facing,weaponspeed);
}
if (key_down(KEY_G))
{
if (key_pressed(KEY_LEFT) and camera.x>0)
{
camera.x-=1;
playcamera();
}
if (key_pressed(KEY_RIGHT) and camera.x<maxx)
{
camera.x+=1;
playcamera();
}
if (key_pressed(KEY_DOWN) and camera.y>0)
{
camera.y-=1;
playcamera();
}
if (key_pressed(KEY_UP))
{
camera.y+=1;
playcamera();
}
}
if (key_up(KEY_G))
{
camera.x=me.x;
camera.y=me.y;
}
if (health<=0)
{
fade_pool(p,2,-35);
reset();
mainmenu();
}
if (gmt()=="" and falling==false and jumping==0)
{
falling=true;
}
if (falling==true)
{
fallloop();
}
if (key_pressed(KEY_C))
{
speak(me.x+", "+me.y);
}
if (key_pressed(KEY_UP) and jumping==0 and key_up(KEY_G))
{
p.play_stationary("jump.ogg",false);
ty1=me.y;
ty2=me.y+jumpheight;
jumping=1;
ascending=true;
}
if (jumping==1)
{
if (atapex==true and jumptimer.elapsed>=apextime)
{
jumptimer.restart();
atapex=false;
}
if (ascending==false and jumptimer.elapsed>=jumptime2 and atapex==false)
{
jumptimer.restart();
me.y-=1;
checkforplatforms();
if (me.y<=ty1)
{
me.y=ty1;
p.play_stationary(""+gmt()+"land.ogg",false);
jumping=0;
}
}
if (ascending==true and jumptimer.elapsed>=jumptime)
{
jumptimer.restart();
me.y+=1;
checkforwalls();
if (me.y>=ty2)
{
ascending=false;
jumptimer.restart();
atapex=true;
}
}
}
if (key_pressed(KEY_ESCAPE))
{
fade_pool(p,2,-35);
reset();
mainmenu();
}
if (key_down(KEY_LCONTROL) or key_down(KEY_RCONTROL))
{
movetime=runtime;
}
else if (jumping==1 or falling==true)
{
movetime=airtime;
}
else
{
movetime=walktime;
}
if (key_up(KEY_G))
{
if (key_down(KEY_LEFT) and movetimer.elapsed>=movetime and me.x>0)
{
facing=Left;
movetimer.restart();
me.x-=1;
playstep();
}
if (key_down(KEY_RIGHT) and movetimer.elapsed>=movetime and me.x<maxx)
{
facing=Right;
movetimer.restart();
me.x+=1;
playstep();
}
}
}
}
void checkforplatforms()
{
if (map.exists(me.x+":"+me.y))
{
p.play_stationary(""+gmt()+"land.ogg",false);
jumping=0;
falling=false;
fallspeed=deffallspeed;
}
}
void checkforwalls()
{
if (map.exists(me.x+":"+me.y) and gmt()=="wall")
{
p.play_stationary("wall.ogg",false);
ascending=false;
jumptimer.restart();
atapex=true;
}
}
void bounce()
{
if (facing==Left)
{
me.x+=1;
}
else if (facing==Right)
{
me.x-=1;
}
}
void fallloop()
{
if (falltimer.elapsed>=fallspeed)
{
falltimer.restart();
me.y-=1;
if (fallspeed>50)
fallspeed-=1;
checkforplatforms();
}
}
void reset()
{
arena=false;
destroy_all_zombies();
levelname="";
destroy_all_hazards();
p.destroy_all();
map.delete_all();
me.x=0;
me.y=0;
health=100;
falling=false;
jumping=0;
}
void tempreset()
{
destroy_all_zombies();
destroy_all_hazards();
p.destroy_all();
map.delete_all();
me.x=0;
me.y=0;
falling=false;
jumping=0;
}
void playcamera()
{
if (gct()=="")
{
p.play_2d("cameraair.ogg",me.x,me.y,camera.x,camera.y,false);
}
else if (gct()=="hazard")
{
p.play_2d("camerahazard.ogg",me.x,me.y,camera.x,camera.y,false);
}
else if (gct()=="wall")
{
p.play_2d("camerawall.ogg",me.x,me.y,camera.x,camera.y,false);
}
else
{
p.play_2d("cameratile.ogg",me.x,me.y,camera.x,camera.y,false);
}
}
void checkcard()
{
if (COMMAND_LINE!="")
{
if (COMMAND_LINE=="gl")
{
string[] devices=list_sound_devices();
string dev;
for (uint i=0; i<devices.length(); i++)
{
dev+=i+": "+devices[i]+"
";
}
alert("devices list",dev);
exit();
}
int cl=string_to_number(COMMAND_LINE);
if (cl>0)
{
open_sound_device(cl);
}
}
}